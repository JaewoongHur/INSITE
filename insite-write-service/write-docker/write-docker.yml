version: '3'
services:
  influxdb:
    image: influxdb:latest
    ports:
      - "8086:8086"
    volumes:
      - "./influxdb/data:/var/lib/influxdb2"
      - "./influxdb/config:/etc/influxdb2"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=thirtyman
      - DOCKER_INFLUXDB_INIT_PASSWORD=behappy1234
      - DOCKER_INFLUXDB_INIT_ORG=thirty
      - DOCKER_INFLUXDB_INIT_BUCKET=insite
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=behappy1234
    container_name: influxdb-insite
    networks:
      - elk

  zk:
    container_name: zookeeper
    image: wurstmeister/zookeeper:latest
    restart: always
    hostname: zk
    ports:
      - "2181:2181"
    volumes:
      - "~/zk-cluster/zk1/data:/data"
    networks:
      - elk

  kafka:
    container_name: kafka
    image: wurstmeister/kafka:latest
    restart: on-failure
    depends_on:
      - zk
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:9093
      KAFKA_CREATE_TOPICS: "data:1:1,button:1:1"
      KAFKA_ZOOKEEPER_CONNECT: "zk:2181"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      TZ: Asia/Seoul
    networks:
      - elk

  telegraf:
    image: telegraf:latest
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    environment:
      INFLUXDB_URL: http://influxdb-insite:8086
      INFLUXDB_TOKEN: behappy1234
      INFLUXDB_ORG: thirty
      INFLUXDB_BUCKET: insite
    depends_on:
      - influxdb
    container_name: telegraf-insite
    networks:
      - elk

networks:
  elk:
    external: true




#version: '3.9'
#services:
#
#  zk1:
#    container_name: zookeeper1
#    image: wurstmeister/zookeeper:latest
#    restart: always
#    hostname: zk1
#    ports:
#      - "2181:2181"
#    environment:
#      ZOO_MY_ID: 1
#      ZOO_SERVERS: server.1=zk1:2888:3888;2181 server.2=zk2:2888:3888;2181 server.3=zk3:2888:3888;2181
#      TZ: Asia/Seoul
#    volumes:
#      - "~/zk-cluster/zk1/data:/data"
#    networks:
#      - elk
#
#  zk2:
#    container_name: zookeeper2
#    image: wurstmeister/zookeeper:latest
#    restart: always
#    hostname: zk2
#    ports:
#      - "2182:2181"
#    environment:
#      ZOO_MY_ID: 2
#      ZOO_SERVERS: server.1=zk1:2888:3888;2181 server.2=zk2:2888:3888;2181 server.3=zk3:2888:3888;2181
#      TZ: Asia/Seoul
#    volumes:
#      - "~/zk-cluster/zk2/data:/data"
#    networks:
#      - elk
#  zk3:
#    container_name: zookeeper3
#    image: wurstmeister/zookeeper:latest
#    restart: always
#    hostname: zk3
#    ports:
#      - "2183:2181"
#    environment:
#      ZOO_MY_ID: 3
#      ZOO_SERVERS: server.1=zk1:2888:3888;2181 server.2=zk2:2888:3888;2181 server.3=zk3:2888:3888;2181
#      TZ: Asia/Seoul
#    volumes:
#      - "~/zk-cluster/zk3/data:/data"
#    networks:
#      - elk
#  kafka1:
#    container_name: kafka1
#    image: wurstmeister/kafka:latest
#    restart: on-failure
#    depends_on:
#      - zk1
#      - zk2
#      - zk3
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
#      KAFKA_LISTENERS: PLAINTEXT://:9092
#      BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9092,kafka3:9092
#      KAFKA_ZOOKEEPER_CONNECT: "zk1:2181,zk2:2182,zk3:2183"
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
#      TZ: Asia/Seoul
#    networks:
#      - elk
#  kafka2:
#    container_name: kafka2
#    image: wurstmeister/kafka:latest
#    restart: on-failure
#    depends_on:
#      - zk1
#      - zk2
#      - zk3
#    ports:
#      - "9093:9092"
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    environment:
#      KAFKA_LISTENERS: PLAINTEXT://:9092
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092
#      KAFKA_BROKER_ID: 2
#      BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9092,kafka3:9092
#      KAFKA_ZOOKEEPER_CONNECT: "zk1:2181,zk2:2182,zk3:2183"
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
#      TZ: Asia/Seoul
#    networks:
#      - elk
#  kafka3:
#    container_name: kafka3
#    image: wurstmeister/kafka:latest
#    restart: on-failure
#    depends_on:
#      - zk1
#      - zk2
#      - zk3
#    ports:
#      - "9094:9092"
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    environment:
#      KAFKA_BROKER_ID: 3
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9092
#      KAFKA_LISTENERS: PLAINTEXT://:9092
#      BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9092,kafka3:9092
#      KAFKA_ZOOKEEPER_CONNECT: "zk1:2181,zk2:2182,zk3:2183"
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
#      TZ: Asia/Seoul
#    networks:
#      - elk
#  kafka-ui:
#    container_name: kafka-ui
#    image: provectuslabs/kafka-ui:latest
#    restart: always
#    ports:
#      - "10000:8080"
#    environment:
#      KAFKA_CLUSTERS_0_NAME: "클러스터 이름"
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka1:9092,kafka2:9092,kafka3:9092"
#      KAFKA_CLUSTERS_0_ZOOKEEPER: "zk1:2181,zk2:2182,zk3:2183"
#      AUTH_TYPE: "LOGIN_FORM"
#      SPRING_SECURITY_USER_NAME: <사용자 ID>
#      SPRING_SECURITY_USER_PASSWORD: <사용자 비밀번호>
#      TZ: Asia/Seoul
#    networks:
#      - elk
#  connect:
#    container_name: kafka-connect
#    image: woonchoi/custom-kafka-connect:latest
#    depends_on:
#      - kafka1
#      - kafka2
#      - kafka3
#    ports:
#      - "8083:8083"
#    environment:
#      CONNECT_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092,kafka3:9092"
#      CONNECT_REST_ADVERTISED_HOST_NAME: connect
#      CONNECT_GROUP_ID: connect-group
#      CONNECT_CONFIG_STORAGE_TOPIC: connect-config
#      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
#      CONNECT_STATUS_STORAGE_TOPIC: connect-status
#      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
#      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
#      CONNECT_REST_PORT: 8083
#      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
#      # Debezium 플러그인 설치
#      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
#      TZ: Asia/Seoul
#      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3
#      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3
#      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    networks:
#      - elk
#    command: |
#      bash -c '
#        confluent-hub install --no-prompt debezium/debezium-connector-mysql:latest
#        confluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:latest
#         /etc/confluent/docker/run
#      '
#networks:
#  elk:
#    external: true